plugins {
    id 'gg.essential.multi-version'
    id 'gg.essential.defaults'
}

loom.serverOnlyMinecraftJar()

repositories {
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://maven.impactdev.net/repository/development/' }
    maven { url 'https://maven.nucleoid.xyz/' }
}

dependencies {
    modImplementation include("net.kyori:adventure-platform-fabric:${fabric_adventure_platform_version}")
    modImplementation include("me.lucko:fabric-permissions-api:${fabric_permissions_api_version}")
    modImplementation include("eu.pb4:placeholder-api:${fabric_placeholder_api_version}")
    modImplementation include("net.impactdev.impactor.api:economy:${fabric_impactor_api_version}")
    modImplementation include("net.william278.cloplib:cloplib-fabric:2.0+$project.name")
    modCompileOnly "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"

    implementation include('org.apache.commons:commons-pool2:2.12.0')
    implementation include("org.xerial:sqlite-jdbc:$sqlite_driver_version")
    implementation include("com.mysql:mysql-connector-j:$mysql_driver_version")
    implementation include("org.mariadb.jdbc:mariadb-java-client:$mariadb_driver_version")
    implementation include("redis.clients:jedis:$jedis_version")

    compileOnly 'org.jetbrains:annotations:26.0.1'
    compileOnly 'org.projectlombok:lombok:1.18.36'

    annotationProcessor 'org.projectlombok:lombok:1.18.36'

//    shadow project(path: ":common") // TODO - remove, for debug only
    implementation project(path: ":common")
}

processResources {
    filesMatching(Arrays.asList("fabric.mod.json")) {
        expand([
                version: version,
                fabric_loader_version: fabric_loader_version,
                fabric_minecraft_version: project.name,
        ])
    }
}

shadowJar {
    configurations = [project.configurations.shadow]
    destinationDirectory.set(file("$projectDir/build/libs"))

    exclude('net.fabricmc:.*')
    exclude('net.kyori:.*')
    exclude '/mappings/*'

    relocate 'net.jodah', 'net.william278.huskclaims.libraries'
    relocate 'org.apache.commons.io', 'net.william278.huskclaims.libraries.commons.io'
    relocate 'org.apache.commons.text', 'net.william278.huskclaims.libraries.commons.text'
    relocate 'org.apache.commons.lang3', 'net.william278.huskclaims.libraries.commons.lang3'
    relocate 'de.themoep', 'net.william278.huskclaims.libraries'
    relocate 'org.jetbrains', 'net.william278.huskclaims.libraries'
    relocate 'org.intellij', 'net.william278.huskclaims.libraries'
    relocate 'com.zaxxer', 'net.william278.huskclaims.libraries'
    relocate 'net.william278.paginedown', 'net.william278.huskclaims.libraries.paginedown'
    relocate 'net.william278.desertwell', 'net.william278.huskclaims.libraries.desertwell'
    relocate 'net.william278.cloplib', 'net.william278.huskclaims.libraries.cloplib'
    relocate 'org.json', 'net.william278.huskclaims.libraries.json'
    relocate 'dev.dejvokep.boostedyaml', 'net.william278.huskclaims.libraries.boostedyaml'
    relocate 'org.snakeyaml', 'net.william278.huskclaims.libraries.snakeyaml'
    relocate 'com.google.gson', 'net.william278.huskclaims.libraries.gson'
    relocate 'com.fatboyindustrial', 'net.william278.huskclaims.libraries'
    relocate 'de.exlll', 'net.william278.huskclaims.libraries'
}

remapJar {
    dependsOn tasks.shadowJar
    mustRunAfter tasks.shadowJar
    inputFile = shadowJar.archiveFile.get()
    addNestedDependencies = true

    destinationDirectory.set(file("$rootDir/target/"))
    archiveClassifier.set('')
}

shadowJar.finalizedBy(remapJar)